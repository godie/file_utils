# .github/workflows/build_windows_exe.yml

name: Build Windows Executable

on:
  push:
    branches: [ "main" ] # Dispara el workflow cuando se haga push a la rama 'main'
  pull_request:
    branches: [ "main" ] # Dispara el workflow cuando se cree un Pull Request a 'main'
  workflow_dispatch: # Permite ejecutar el workflow manualmente desde la GitHub UI

permissions:
  contents: read # Permite leer el contenido del repositorio

jobs:
  build:
    runs-on: windows-latest # Ejecuta este trabajo en una máquina virtual con Windows

    steps:
    - name: Checkout code
      uses: actions/checkout@v4 # Clona tu repositorio

    - name: Set up Python 3.10
      uses: actions/setup-python@v5 # Usa la versión 5 de la acción de setup-python
      with:
        python-version: "3.10" # Especifica la versión de Python a usar

    - name: Install PyInstaller
      run: |
        python -m pip install --upgrade pip # Asegura que pip esté actualizado
        pip install pyinstaller # Instala PyInstaller

    - name: Build Windows Executable
      run: |
        # Ejecuta PyInstaller para crear el ejecutable.
        # --noconfirm: Sobrescribe los archivos de salida existentes sin pedir confirmación.
        # --onefile: Empaqueta todo en un único archivo .exe.
        # --windowed: Crea una aplicación GUI sin ventana de consola.
        # --name FileFinder: Especifica el nombre del ejecutable de salida como FileFinder.exe
        # NOTA: config.json no se incluye aquí; se espera que esté junto al .exe.
        pyinstaller --noconfirm --onefile --windowed --name FileFinder main.py

    - name: Upload Executable Artifact
      uses: actions/upload-artifact@v4 # Sube el ejecutable como un artefacto del workflow
      with:
        name: file-finder-windows-exe # Nombre del artefacto
        path: |
          dist/FileFinder.exe
          config.json
        # Asegúrate de que config.json esté en la raíz de tu repositorio,
        # junto a main.py, gui_app.py, y file_search_logic.py
